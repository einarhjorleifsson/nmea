// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// format-nmea.cpp
strings cpp_nmea_as_character(list nmea);
extern "C" SEXP _nmea_cpp_nmea_as_character(SEXP nmea) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_nmea_as_character(cpp11::as_cpp<cpp11::decay_t<list>>(nmea)));
  END_CPP11
}
// parse-sentences.cpp
void cpp_nmea_parse_sentences(SEXP obj, int skip, double n_max, double sentence_max_length);
extern "C" SEXP _nmea_cpp_nmea_parse_sentences(SEXP obj, SEXP skip, SEXP n_max, SEXP sentence_max_length) {
  BEGIN_CPP11
    cpp_nmea_parse_sentences(cpp11::as_cpp<cpp11::decay_t<SEXP>>(obj), cpp11::as_cpp<cpp11::decay_t<int>>(skip), cpp11::as_cpp<cpp11::decay_t<double>>(n_max), cpp11::as_cpp<cpp11::decay_t<double>>(sentence_max_length));
    return R_NilValue;
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _nmea_cpp_nmea_as_character(SEXP);
extern SEXP _nmea_cpp_nmea_parse_sentences(SEXP, SEXP, SEXP, SEXP);
extern SEXP nmea_c_character_as_nmea(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_nmea_cpp_nmea_as_character",    (DL_FUNC) &_nmea_cpp_nmea_as_character,    1},
    {"_nmea_cpp_nmea_parse_sentences", (DL_FUNC) &_nmea_cpp_nmea_parse_sentences, 4},
    {"nmea_c_character_as_nmea",       (DL_FUNC) &nmea_c_character_as_nmea,       1},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_nmea(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
